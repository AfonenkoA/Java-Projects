# Платформа управления студентами "Деканат"

## Overall Description

Данный проект представляет собой веб-приложение для автоматизации процессов управления обучением студентов в университете. Система предоставляет функционал для администраторов, преподавателей и студентов, позволяя управлять академическими курсами, группами, расписанием, заданиями и оценками.

## Product Functions

-   Регистрация и аутентификация пользователей с разными ролями (Студент, Преподаватель, Администратор).
-   Управление академическими курсами и их привязка к учебным планам.
-   Формирование и управление студенческими группами.
-   Составление и просмотр расписания занятий.
-   Публикация учебных материалов и заданий.
-   Сдача заданий студентами и их проверка преподавателями.
-   Выставление и отслеживание академических оценок.
-   Просмотр академической успеваемости.

## System Features

### Управление аккаунтами и аутентификация

#### Description and Priority

Эта функция обеспечивает безопасную регистрацию, аутентификацию и авторизацию пользователей в системе. Пользователи распределяются по ролям (Студент, Преподаватель, Администратор), которые определяют их права доступа. Приоритет: Высокий.

### Управление академическими курсами

#### Description and Priority

Позволяет администраторам и преподавателям создавать, редактировать и архивировать академические курсы. Каждый курс содержит метаинформацию (название, описание, код, количество кредитов). Приоритет: Высокий.

#### Stimulus/Response Sequences

-   **Сценарий 1:** Создание нового курса администратором.
    *   *Стимул:* Администратор заполняет форму (название, код, описание, количество кредитов) и нажимает "Создать".
    *   *Ответ:* Система сохраняет новый курс в базе данных и отображает его в общем списке курсов.
-   **Сценарий 2:** Назначение преподавателя на курс.
    *   *Стимул:* Администратор со страницы курса выбирает "Назначить преподавателя" и выбирает пользователя с ролью `PROFESSOR`.
    *   *Ответ:* Система связывает выбранного преподавателя с курсом. Теперь этот курс отображается в личном кабинете преподавателя.

#### Functional Requirements

-   **COURSE-1**: Только пользователи с ролью `ADMIN` должны иметь возможность создавать и архивировать курсы.
-   **COURSE-2**: Каждый курс должен иметь уникальный код.
-   **COURSE-3**: Система должна позволять назначать одного или нескольких преподавателей на курс.

### Управление студенческими группами

#### Description and Priority

Функция позволяет администраторам формировать студенческие группы, зачислять и отчислять студентов из групп. Группа привязана к академическому году. Приоритет: Высокий.

#### Stimulus/Response Sequences

-   **Сценарий 1:** Зачисление студента в группу.
    *   *Стимул:* Администратор из интерфейса управления группой выбирает "Добавить студента", вводит имя или email студента и подтверждает действие.
    *   *Ответ:* Система добавляет связь между студентом и группой в базе данных. Студент получает доступ к расписанию и материалам, связанным с его группой.
-   **Сценарий 2:** Просмотр состава группы.
    *   *Стимул:* Преподаватель заходит на страницу своей группы.
    *   *Ответ:* Система отображает список всех студентов, зачисленных в данную группу.

#### Functional Requirements

-   **GROUP-1**: Система должна позволять `ADMIN` создавать, редактировать и удалять группы.
-   **GROUP-2**: Система должна позволять `ADMIN` добавлять и удалять студентов из группы.
-   **GROUP-3**: Студент может состоять только в одной группе в рамках одного академического года.
-   **GROUP-4**: Система должна предоставлять список студентов группы для преподавателей, ведущих у этой группы курсы.

### Управление расписанием

#### Description and Priority

Позволяет администраторам создавать и управлять расписанием занятий для групп. Каждое событие в расписании привязано к курсу, группе, преподавателю, аудитории и временному интервалу. Приоритет: Средний.

#### Stimulus/Response Sequences

-   **Сценарий 1:** Добавление занятия в расписание.
    *   *Стимул:* Администратор выбирает группу, курс, преподавателя, тип занятия (лекция/семинар), аудиторию, дату и время, затем нажимает "Сохранить".
    *   *Ответ:* Система проверяет на конфликты (аудитория, преподаватель) и, если их нет, сохраняет новое занятие. Расписание группы и преподавателя автоматически обновляется.
-   **Сценарий 2:** Студент просматривает свое расписание на неделю.
    *   *Стимул:* Студент заходит в раздел "Мое расписание".
    *   *Ответ:* Система отображает список всех занятий для его группы на текущую неделю в хронологическом порядке.

#### Functional Requirements

-   **SCHED-1**: Система должна предотвращать двойное бронирование одной аудитории на одно и то же время.
-   **SCHED-2**: Система должна предотвращать назначение одному преподавателю двух занятий одновременно.
-   **SCHED-3**: Расписание должно отображаться в виде, удобном для восприятия (например, недельная таблица).

### Управление заданиями и оценками

#### Description and Priority

Преподаватели могут создавать задания (домашние работы, проекты) для своих курсов и выставлять оценки. Приоритет: Высокий.

#### Stimulus/Response Sequences

-   **Сценарий 1:** Преподаватель публикует новое задание.
    *   *Стимул:* Преподаватель в интерфейсе курса нажимает "Добавить задание", вводит название, описание, срок сдачи и максимальный балл.
    *   *Ответ:* Система создает запись об задании, и оно становится видимым для всех студентов курса. Генерируется уведомление.
-   **Сценарий 2:** Преподаватель выставляет оценку.
    *   *Стимул:* Преподаватель открывает список отправленных работ, выбирает работу студента, выставляет балл и пишет комментарий.
    *   *Ответ:* Система обновляет запись в таблице `grades`. Студент видит оценку в своем журнале успеваемости.

#### Functional Requirements

-   **ASSGN-1**: Преподаватель должен иметь возможность создавать, редактировать и удалять задания для своих курсов.
-   **ASSGN-2**: Система должна рассчитывать текущий средний балл студента по курсу на основе всех выставленных оценок.
-   **ASSGN-3**: Студент должен иметь возможность просматривать все свои оценки.

### Просмотр академической успеваемости

#### Description and Priority

Позволяет студенту просматривать свою полную академическую историю: список пройденных курсов, полученные оценки, итоговый средний балл. Приоритет: Средний.

#### Stimulus/Response Sequences

**Сценарий:** Студент запрашивает свою академическую справку.
-   *Стимул:* Студент переходит в раздел "Успеваемость".
-   *Ответ:* Система формирует отчет, включающий все курсы, по которым была выставлена итоговая оценка, и рассчитывает совокупный средний балл. Данные отображаются в структурированной таблице.

#### Functional Requirements

-   **TRANS-1**: Система должна отображать только завершенные студентом курсы (с итоговой оценкой).
-   **TRANS-2**: Система должна рассчитывать средний балл в соответствии с стандартной формулой.
-   **TRANS-3**: Успеваемость должна быть доступна только самому студенту, его преподавателям и администраторам.
