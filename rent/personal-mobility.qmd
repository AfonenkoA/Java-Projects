# Сервис аренды средств персональной мобильности

## **2. Общее описание**

Система "ScooterRent" представляет собой веб-приложение, которое позволяет пользователям находить, бронировать и арендовать СПМ. Система управляет учетными записями пользователей, парком транспортных средств, обработкой платежей и учетом аренды.

## **3. Функции продукта**

*   Управление аккаунтом пользователя
*   Управление каталогом и состоянием СПМ
*   Процесс аренды СПМ
*   Управление платежами и расчетами
*   Панель администратора для управления системой

## **4. Детализация системных функций**


### **4.2. Управление каталогом и состоянием СПМ**

#### **4.2.1. Description and Priority**

Функция позволяет системе управлять парком СПМ: добавлять, удалять, изменять данные о транспорте, а также отслеживать их текущее местоположение и статус (доступен, арендован, на обслуживании). Приоритет: Высокий.

#### **4.2.2. Stimulus/Response Sequences**

-   **Сценарий 1: Поиск доступных СПМ**
    *   *Стимул:* Пользователь открывает карту на главной странице.
    *   *Ответ:* Система запрашивает из БД все СПМ со статусом "доступен" и возвращает их координаты и метаданные для отображения на карте.
-   **Сценарий 2: Администратор добавляет новое СПМ**
    *   *Стимул:* Администратор через панель управления вводит данные нового СПМ (тип, модель, координаты размещения).
    *   *Ответ:* Система создает новую запись в БД и присваивает СПМ уникальный идентификатор.

#### **4.2.3. Functional Requirements**

*   **VEH-1**: Система должна предоставлять endpoint для получения списка всех доступных СПМ в заданном радиусе от пользователя.
*   **VEH-2**: Система должна хранить для каждого СПМ следующие данные: уникальный ID, тип, модель, текущие координаты (широта, долгота), заряд батареи, статус (доступен, арендован, неисправен).
*   **VEH-3**: Система должна предоставлять администратору endpoint для CRUD (Create, Read, Update, Delete) операций с СПМ.
*   **VEH-4**: Система должна автоматически обновлять статус СПМ при начале и окончании аренды.

### **4.3. Процесс аренды СПМ**

#### **4.3.1. Description and Priority**

Функция описывает полный жизненный цикл аренды: от бронирования до завершения поездки и блокировки средств. Приоритет: Высокий.

#### **4.3.2. Stimulus/Response Sequences**

-   **Сценарий 1: Начало аренды**
    *   *Стимул:* Пользователь на карте выбирает доступное СПМ и нажимает кнопку "Арендовать".
    *   *Ответ:* Система проверяет, не имеет ли пользователь активных аренд, блокирует небольшую сумму на его счете для проверки платежеспособности, изменяет статус СПМ на "арендован", создает запись о начале поездки в БД и предоставляет пользователю код для разблокировки транспорта.
-   **Сценарий 2: Завершение аренды**
    *   *Стимул:* Пользователь ставит СПМ в разрешенное место и нажимает "Завершить поездку" в приложении.
    *   *Ответ:* Система фиксирует конечные координаты, вычисляет длительность и стоимость поездки, списывает средства с привязанной карты пользователя, разблокирует сумму-холд, изменяет статус СПМ на "доступен" и сохраняет завершенную поездку в историю.

#### **4.3.3. Functional Requirements**

*   **RENT-1**: Система должна предоставлять endpoint для начала аренды, который проверяет доступность выбранного СПМ.
*   **RENT-2**: Система должна предотвращать начало новой аренды, если у пользователя есть активная поездка.
*   **RENT-3**: Система должна вычислять стоимость поездки на основе тарифов (время, расстояние) и сохранять итоговую сумму.
*   **RENT-4**: Система должна предоставлять endpoint для завершения аренды, который инициирует процесс расчета и списания средств.

### **4.4. Управление платежами и расчетами**

#### **4.4.1. Description and Priority**

Функция отвечает за интеграцию с платежным шлюзом, управление платежными методами пользователей, обработку списаний и возвратов. Приоритет: Высокий.

#### **4.4.2. Stimulus/Response Sequences**

-   **Сценарий 1: Привязка банковской карты**
    *   *Стимул:* Пользователь в разделе "Платежные методы" вводит данные карты.
    *   *Ответ:* Система отправляет данные в платежный шлюз (например, Stripe), получает токен, представляющий карту, и сохраняет этот токен в БД, ассоциируя его с пользователем.
-   **Сценарий 2: Списание средств за поездку**
    *   *Стимул:* Система получает запрос на завершение аренды с рассчитанной суммой.
    *   *Ответ:* Система использует сохраненный токен карты пользователя для выполнения списания через API платежного шлюза. Результат транзакции (успех/неудача) сохраняется в БД.

#### **4.4.3. Functional Requirements**

*   **PAY-1**: Система должна интегрироваться с внешним платежным шлюзом через REST API.
*   **PAY-2**: Система должна позволять пользователю привязывать, просматривать и удалять платежные методы.
*   **PAY-3**: Система должна инициировать блокировку (холд) средств при начале аренды.
*   **PAY-4**: Система должна инициировать списание окончательной суммы при завершении аренды и отмену неиспользованного холда.

### **4.5. Панель администратора**

#### **4.5.1. Description and Priority**

Функция предоставляет администраторам интерфейс для полного управления системой: пользователями, СПМ, тарифами и просмотра отчетности. Приоритет: Средний.

#### **4.5.2. Stimulus/Response Sequences**

-   **Сценарий 1: Просмотр общей статистики**
    *   *Стимул:* Администратор заходит в панель управления на главный экран.
    *   *Ответ:* Система отображает дашборд с ключевыми метриками: количество активных поездок, общий доход за сегодня, количество доступных/неисправных СПМ.
-   **Сценарий 2: Изменение тарифов**
    *   *Стимул:* Администратор переходит в раздел "Тарифы" и изменяет стоимость за минуту.
    *   *Ответ:* Система применяет новые тарифы для всех последующих поездок.

#### **4.5.3. Functional Requirements**

*   **ADM-1**: Система должна предоставлять защищенный веб-интерфейс или набор REST endpoints, доступных только пользователям с ролью "Администратор".
*   **ADM-2**: Система должна позволять администратору осуществлять поиск, блокировку и разблокировку пользователей.
*   **ADM-3**: Система должна позволять администратору управлять тарифами (создавать, читать, обновлять).
*   **ADM-4**: Система должна генерировать отчеты по доходам и количеству поездок за выбранный период.
