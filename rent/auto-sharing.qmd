# Сервис каршеринга

## **Overall Description**

Реализовать веб-сервис для аренды автомобилей (каршеринг). Сервис должен позволять пользователям находить, бронировать и арендовать автомобили на определенное время, а администраторам — управлять автопарком и отслеживать операции.

## **Product Functions**

*   Регистрация, аутентификация и авторизация пользователей (клиентов и администраторов).
*   Управление профилем пользователя и водительскими правами.
*   Управление каталогом автомобилей (добавление, редактирование, удаление).
*   Поиск и фильтрация доступных для аренды автомобилей.
*   Бронирование и отмена бронирования автомобиля.
*   Управление процессом аренды (начало, завершение, отслеживание статуса).
*   Расчет стоимости аренды и обработка платежей (симуляция).
*   Просмотр истории аренд.
*   Система уведомлений.

## **System Features**

### **2. Управление автопарком (для администратора)**

#### **Description and Priority**

Позволяет администраторам управлять каталогом автомобилей: добавлять, редактировать, снимать с эксплуатации и удалять автомобили. Приоритет: Высокий.

#### **Stimulus/Response Sequences**

*   **Сценарий 1:** Добавление нового автомобиля
    -   *Стимул:* Администратор переходит в раздел "Автопарк", нажимает "Добавить авто", заполняет данные (модель, VIN, год, цвет, тариф и т.д.) и сохраняет.
    -   *Ответ:* Система валидирует данные (например, уникальность VIN) и сохраняет новый автомобиль в базу данных со статусом "Доступен". Отображает сообщение об успехе.
*   **Сценарий 2:** Изменение статуса автомобиля
    -   *Стимул:* Администратор меняет статус автомобиля на "Обслуживание" или "Списан".
    -   *Ответ:* Система обновляет статус автомобиля. Если статус изменен на "Обслуживание", автомобиль исключается из поиска для бронирования.

#### **Functional Requirements**

*   **FLEET-1:** Система должна предоставлять интерфейс для добавления, редактирования и удаления автомобилей.
*   **FLEET-2:** Система должна хранить для каждого автомобиля: VIN, марку, модель, год выпуска, цвет, тип топлива, номерной знак, состояние (отличное, хорошее, удовлетворительное), текущий пробег, фотографии, тариф за час/сутки.
*   **FLEET-3:** Система должна поддерживать статусы автомобиля: "Доступен", "Арендован", "Обслуживание", "Списан".
*   **FLEET-4:** Система должна гарантировать уникальность VIN и номерного знака в системе.

### **3. Поиск и бронирование автомобиля**

#### **Description and Priority**

Позволяет клиентам находить доступные автомобили по заданным критериям и бронировать их на выбранный временной интервал. Приоритет: Высокий.

#### **Stimulus/Response Sequences**

-   **Сценарий 1:** Успешный поиск и бронирование
    *   *Стимул:* Клиент задает параметры поиска (дата/время начала и окончания, класс авто, марка). Система показывает список доступных авто. Клиент выбирает авто и нажимает "Забронировать".
    *   *Ответ:* Система проверяет, что автомобиль все еще доступен на выбранный интервал, создает запись о бронировании со статусом "Подтверждено", блокирует автомобиль для других пользователей на этот период и отправляет клиенту подтверждение.
-   **Сценарий 2:** Попытка бронирования уже занятого автомобиля
    *   *Стимул:* Клиент пытается забронировать автомобиль, который был только что забронирован другим пользователем.
    *   *Ответ:* Система отображает сообщение: "Извините, этот автомобиль только что был забронирован. Пожалуйста, выберите другой."

#### **Functional Requirements**

*   **BOOK-1:** Система должна предоставлять интерфейс поиска с фильтрами по дате/времени, классу автомобиля, марке и модели.
*   **BOOK-2:** Система должна отображать в результатах поиска только автомобили со статусом "Доступен", не имеющие активных броней на запрашиваемый период.
*   **BOOK-3:** Система должна рассчитывать и отображать предварительную стоимость аренды на основе тарифа автомобиля и выбранного периода.
*   **BOOK-4:** При создании брони система должна атомарно проверять доступность автомобиля и резервировать его, предотвращая "двойное бронирование".
*   **BOOK-5:** Каждое бронирование должно иметь статус: "Подтверждено", "Активно", "Завершено", "Отменено".

### **4. Управление процессом аренды**

#### **Description and Priority**

Охватывает весь жизненный цикл аренды: от момента получения автомобиля клиентом до его возврата. Приоритет: Высокий.

#### **Stimulus/Response Sequences**

-   **Сценарий 1:** Начало аренды
    *   *Стимул:* Клиент подходит к автомобилю и в мобильном приложении/на сайте нажимает "Начать поездку" для своего активного бронирования.
    *   *Ответ:* Система проверяет, что текущее время в рамках забронированного слота, меняет статус брони на "Активно", статус автомобиля на "Арендован", фиксирует время начала фактической аренды.
-   **Сценарий 2:** Завершение аренды
    *   *Стимул:* Клиент возвращает автомобиль на парковку и нажимает "Завершить поездку". Вводит текущие показания одометра и загружает фото автомобиля.
    *   *Ответ:* Система фиксирует время окончания, рассчитывает итоговую стоимость, исходя из фактического времени и пробега, меняет статусы брони и автомобиля, создает финальный счет для платежа.

#### **Functional Requirements**

*   **RENT-1:** Система должна позволять клиенту начать аренду только в рамках своего подтвержденного бронирования.
*   **RENT-2:** Система должна фиксировать фактические дату/время начала и окончания аренды.
*   **RENT-3:** Система должна рассчитывать итоговую стоимость на основе тарифа и фактической продолжительности аренды.
*   **RENT-4:** При завершении аренды система должна запрашивать у клиента финальный пробег и фотографии автомобиля для документирования его состояния.
*   **RENT-5:** Система должна автоматически переводить статус автомобиля обратно в "Доступен" после успешного завершения аренды.

### **5. Управление платежами и отчетностью**

#### **Description and Priority**

Обеспечивает симуляцию финансовых расчетов за аренду и предоставляет администраторам базовые отчеты. Приоритет: Средний.

#### **Stimulus/Response Sequences**

-   **Сценарий 1:** Симуляция оплаты
    *   *Стимул:* После завершения аренды система создает счет. Клиент переходит в раздел "История аренд", выбирает незакрытый счет и нажимает "Оплатить".
    *   *Ответ:* Система отображает симулированную страницу успешной оплаты, меняет статус счета на "Оплачен" и сохраняет дату оплаты.
-   **Сценарий 2:** Просмотр отчета о доходах
    *   *Стимул:* Администратор задает период и формирует отчет о доходах.
    *   *Ответ:* Система агрегирует все оплаченные счета за указанный период и отображает сводку по общему доходу и количеству завершенных аренд.

#### **Functional Requirements**

*   **PAY-1:** Система должна автоматически создавать счет для каждой завершенной аренды.
*   **PAY-2:** Система должна хранить информацию о каждом счете: сумма, дата создания, дата оплаты, статус ("Ожидает оплаты", "Оплачен", "Просрочен"), привязанная аренда.
*   **PAY-3:** Система должна предоставлять администратору отчеты: "Доходы за период" и "Статистика использования автомобилей".
*   **PAY-4:** Система должна предоставлять клиенту историю всех его аренд и статусов соответствующих счетов.
